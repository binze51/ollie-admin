syntax = "proto3";

package release;

import "google/api/annotations.proto";
import "release/t_info.proto";
import "release/vo.proto";
import "_common/respstatus/resp.proto";

option go_package = "ollie/kitex_gen/release;release";

service ReleaseService {
  /*
     gitlab-ci job 使用
  */
  // ci-job提交构建matedata
  rpc CIPostService(CIPostServiceRequest) returns (CIPostServiceResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/CIPostService"
    };
  }

  // 全文检索服务名列
  rpc FetchServiceNamesByPrefix(FetchServiceNamesByPrefixRequest) returns (FetchServiceNamesByPrefixResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/FetchServiceNamesByPrefix"
    };
  }

  // 全文检索指定服务的版本列
  rpc FetchServiceVersionsByPrefix(FetchServiceVersionsByPrefixRequest) returns (FetchServiceVersionsByPrefixResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/FetchServiceVersionsByPrefix"
    };
  }

  /*
     cmdcli或web前端 使用
  */

  // 创建发布任务
  rpc CreateRelease(CreateReleaseRequest) returns (CreateReleaseResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/CreateRelease"
    };
  }
  // 检索指定状态发布列表，TODO 其中状态客户端直接做轮询吧
  rpc FetchReleases(FetchReleasesRequest) returns (FetchReleasesResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/FetchReleases"
    };
  }
  
  // 更新指定发布，仅支持副本数、cpu、内存、流控配置，不支持服务增减更新
  rpc UpdateReleaseByID(UpdateReleaseByIDRequest) returns (UpdateReleaseByIDResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/UpdateReleaseByID"
    };
  }
  // 删除指定发布
  rpc RemoveReleaseByID(RemoveReleaseByIDRequest) returns (RemoveReleaseByIDResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/RemoveReleaseByID"
    };
  }
  // 重试指定的异常发布 by id && oplog id
  rpc RetryReleaseByID(RetryReleaseByIDRequest) returns (RetryReleaseByIDResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/RetryReleaseByID"
    };
  }
  // 全量指定发布
  rpc PrimaryReleaseByID(PrimaryReleaseByIDRequest) returns (PrimaryReleaseByIDResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/PrimaryReleaseByID"
    };
  }
  // 全量手动回滚到指定历史全量发布,获取历史全量版本
  rpc RollbackPrimaryReleaseByHistoryID(RollbackPrimaryReleaseByHistoryIDRequest) returns (RollbackPrimaryReleaseByHistoryIDResponse){
    option (google.api.http) = {
      post: "/api/ReleaseService/RollbackPrimaryReleaseByHistoryID"
    };
  }


}

// -- cmdcli或web前端 api----
message RollbackPrimaryReleaseByHistoryIDRequest {
  string history_id = 1;
}

message RollbackPrimaryReleaseByHistoryIDResponse {
  X_Release primary_release = 1;
  respstatus.StatusResp status =2;
}

message PrimaryReleaseByIDRequest {
  string release_id = 1;
}

message PrimaryReleaseByIDResponse {
  X_Release primary_release = 1;
  respstatus.StatusResp status =2;
}

message RemoveReleaseByIDRequest {
  string release_id = 1;
}

message RemoveReleaseByIDResponse {
  X_Release release_list = 1;
  respstatus.StatusResp status =2;
}

message RetryReleaseByIDRequest {
  string release_id = 1;
}

message RetryReleaseByIDResponse {
  respstatus.StatusResp status =2;
}

message UpdateReleaseByIDRequest {
  string release_id = 1;
  X_Release put_data = 2;
}

message UpdateReleaseByIDResponse {
  X_Release release_list = 1;
  respstatus.StatusResp status =2;
}

message FetchReleasesRequest {
  repeated ReleaseStatus status_list = 1; //多种状态 传递数组
}
message FetchReleasesResponse {
  repeated X_Release release_list = 1;
  respstatus.StatusResp status =2;
}

// CreateReleaseRequest
message CreateReleaseRequest {
  NameSpaceType name_space_type = 1; //指定环境
  repeated RoutePolicyRule route_policy_rule_list = 2;
  ReleaseType release_type = 3;

  //每次发布部署 3选1
  oneof release_unit {
    BEReleaseConfig be_release_config_list = 4;
    FEReleaseConfig fe_release_config_list = 5;
    UNIONReleaseConfig union_release_config = 6;
  }
}

//CreateReleaseResponse
message CreateReleaseResponse {
  respstatus.StatusResp status =2;
}

// -- gitlab ci-job api----
// CIPostBuildServiceRequest
message CIPostServiceRequest {
  repeated X_CIBuildService ci_post_data_list = 1;
}
//CIBuildServiceBuildResponse
message CIPostServiceResponse {
  respstatus.StatusResp status =2;
}

//FetchBuildServiceNameByPrefixRequest
message FetchServiceNamesByPrefixRequest {
  string  svc_name_prefix = 1;
}
//FetchBuildServiceNameByPrefixResponse
message FetchServiceNamesByPrefixResponse {
  repeated string svc_name_list = 1;
  respstatus.StatusResp status =2;
}

//FetchBuildServiceVersionByPrefixRequest
message FetchServiceVersionsByPrefixRequest {
  string  svc_name = 1;
  string svc_version_prefix = 2;
}
//FetchBuildServiceVersionByPrefixResponse
message FetchServiceVersionsByPrefixResponse {
  repeated string svc_version_list = 1;
  respstatus.StatusResp status =2;
}